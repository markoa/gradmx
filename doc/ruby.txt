Programski jezik Ruby
=====================

Za razumevanje Rails frameworka i praćenja koda koji je izložen u ovom radu potrebno je poznavati Ruby, programski jezik u kome je napisan. Pošto na srpskom jeziku postoji vrlo malo literature o njemu, u ovom poglavlju će biti izložen pregled osnovnih, a potom i neki od naprednijih elemenata jezika koji su osnova Rails frameworka.

Ruby je dinamički interpretirani programski jezik. Inspirisan je jezicima Lisp, Smalltalk i Perl, ali mu je gramatika lako razumljiva C i Java programerima. Ruby je potpuno objektno orijentisani jezik, ali je takođe prigodan i za proceduralni i funkcionalni stil programiranja. Pruža mogućnosti metaprogramiranja koje mogu da se koriste u svrhu stvaranja jezika specifičnog domena (domain-specific languages, DSL).

Objektna orijentisanost
-----------------------

U Ruby-ju, svaka vrednost je objekat, čak i prosti numerički simboli i vrednosti true, false i nil (nil je Ruby varijanta null - posebna vrednost koja označava odsustvo vrednosti). U primerima koji to demonstriraju pozivamo metodu po imenu class. Komentari u Ruby-ju počinju sa #.

  1.class      # => Fixnum
  0.0.class    # => Float
  true.class   # => TrueClass: true je singlton instanca od TrueClass
  false.class  # => FalseClass
  nil.class    # => NilClass

Koriščenje zagrada prilikom pozivanja funkcija i metoda nije neophodno. U Ruby-ju su zagrade obično opcione i često se ni ne pišu, naročito kada se pozvanoj metodi ne prosleđuje nijedan parametar. Posledica toga je da poziv metode liči na referenciranje imenovanog polja ili promenljive objekta. To nije slučajno, međutim Ruby striktno vodi računa o enkapsulaciji; pristup unutrašnjem stanju objekta spolja nije dozvoljen. Svakom takvom pristupu mora posredovati pristupna metoda, kao što je metoda class u primeru iznad.

Kontrola toka
-------------

Blokovi i iteratori
-------------------

Petlje se često pišu pomoću posebnih metoda koje se nazivaju iteratori.

3.times { puts "gradmx" }   # ispis će se ponoviti tri puta
[1, 2, 3].each { |i| puts } # ispis svakog od elementa niza
selected = [1, 2, 3, 4].select { |i| i%2 == 0 } # izdvoj elemente deljive sa 2
selected.inject do |sum, i| # izračunaj sumu elemenata => 6
  sum + x
end

times, each, select i inject su iteratori koji interakuju sa blokovima koda koji dolaze posle njih. Kontrola toka koja stoji iza ovoga je yield, naredba koja privremeno prebacuje kontrolu izvršavanja sa iteratora na blok koda koji je vezan za poziv iteratora. Kada dođe do kraja koda u bloku, metoda iteratora preuzima kontrolu i nastavlja sa izvršenjem od prve linije posle yield. Česta konvencija je da se jednolinijski blokovi pišu sa vitičastim zagradama, a blokovi sa više linija koda sa do/end.

Povezivanje bloka koda sa pozivom metode je osnovna i vrlo važna mogućnost Ruby-ja. Ono ne mora biti vezano samo za petlje, npr.:

File.open("data.txt") do |f|
  line = f.readline
end

Heševi i simboli
----------------

Heševi su, kao i nizovi, osnovna struktura podataka u Ruby-ju. Zasnovani su na strukturi podataka heš tabele i služe za mapiranje proizvoljnih ključeva na (takođe proizvoljne) vrednosti.

h = {
  :jedan => 1,
  :dva => 2
}
h[:jedan]                   # => 1
h[:dva]                     # => 2
h[:tri] = 3                 # dodaje nov par u heš
h.each do |key, value|      # ugrađeni iterator each daje ključ i vrednost
  print "#{key}: #{value}"  # primer interpolacije stringova; implicitno je pozvana metoda to_s, koju poseduje svaki objekat
end

Heševi mogu da prime bilo koji objekat kao ključ, međutim za to se, kao u primeru iznad, najčešće koriste simboli. Simboli su nepromenljivi, interno čuvani stringovi.

Heševi se često koriste kao parametri funkcija. U Ruby-ju je pisanje vitičastih zagrada opciono ukoliko je heš poslednji u listi parametara. Rails ovu mogućnost često koristi, a rezultat je intuitivniji i izražajniji kod. U sledećoj liniji se prosleđuje jedan heš funkciji redirect_to. Zbog izostavljanja zagrada utisak je da Rails ima definisane posebne ključne ruči za ovu svrhu.

redirect_to :action => 'show', :id => event.id

Metode
------

Metode se definišu pomoću ključne reči def. Rezultat izvršavanja je uvek rezultat poslednje linije koda u njoj. Stoga se pisanje ključne reči return često izostavlja:

def square(x)
  x*x
end

Imena, interpunkcija i prefiksi
-------------------------------

Klase i moduli
--------------

Izuzeci
-------
